//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInput/VR Controlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @VRControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @VRControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""VR Controlls"",
    ""maps"": [
        {
            ""name"": ""VoiceActivation"",
            ""id"": ""eaadf604-ee35-4b25-9f8b-204559dbda4c"",
            ""actions"": [
                {
                    ""name"": ""triggerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""8cf2b63b-9489-4d4a-b09e-38198156adf7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fce0d5a9-1844-479a-8a54-86ad8f3fa420"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""triggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3bb51b2-c562-4995-b984-2299105194f7"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""triggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df0d962b-aece-45ba-98ae-f7f1f97520db"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""triggerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // VoiceActivation
        m_VoiceActivation = asset.FindActionMap("VoiceActivation", throwIfNotFound: true);
        m_VoiceActivation_triggerPressed = m_VoiceActivation.FindAction("triggerPressed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // VoiceActivation
    private readonly InputActionMap m_VoiceActivation;
    private IVoiceActivationActions m_VoiceActivationActionsCallbackInterface;
    private readonly InputAction m_VoiceActivation_triggerPressed;
    public struct VoiceActivationActions
    {
        private @VRControlls m_Wrapper;
        public VoiceActivationActions(@VRControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @triggerPressed => m_Wrapper.m_VoiceActivation_triggerPressed;
        public InputActionMap Get() { return m_Wrapper.m_VoiceActivation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VoiceActivationActions set) { return set.Get(); }
        public void SetCallbacks(IVoiceActivationActions instance)
        {
            if (m_Wrapper.m_VoiceActivationActionsCallbackInterface != null)
            {
                @triggerPressed.started -= m_Wrapper.m_VoiceActivationActionsCallbackInterface.OnTriggerPressed;
                @triggerPressed.performed -= m_Wrapper.m_VoiceActivationActionsCallbackInterface.OnTriggerPressed;
                @triggerPressed.canceled -= m_Wrapper.m_VoiceActivationActionsCallbackInterface.OnTriggerPressed;
            }
            m_Wrapper.m_VoiceActivationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @triggerPressed.started += instance.OnTriggerPressed;
                @triggerPressed.performed += instance.OnTriggerPressed;
                @triggerPressed.canceled += instance.OnTriggerPressed;
            }
        }
    }
    public VoiceActivationActions @VoiceActivation => new VoiceActivationActions(this);
    public interface IVoiceActivationActions
    {
        void OnTriggerPressed(InputAction.CallbackContext context);
    }
}
